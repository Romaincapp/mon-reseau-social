'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '../../../contexts/AuthContext'
import Link from 'next/link'
import { UserCheck } from 'lucide-react'
import Iridescence from '../../../components/backgrounds/Iridescence'

export default function Register() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState(false)
  const [passwordStrength, setPasswordStrength] = useState(0)
  const { signUp } = useAuth()
  const router = useRouter()

  // Calculer la force du mot de passe
  const calculatePasswordStrength = (pwd: string): number => {
    let strength = 0
    if (pwd.length >= 6) strength++
    if (pwd.length >= 10) strength++
    if (/[a-z]/.test(pwd) && /[A-Z]/.test(pwd)) strength++
    if (/\d/.test(pwd)) strength++
    if (/[^a-zA-Z0-9]/.test(pwd)) strength++
    return Math.min(strength, 4)
  }

  const handlePasswordChange = (pwd: string) => {
    setPassword(pwd)
    setPasswordStrength(calculatePasswordStrength(pwd))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    // Validation
    if (password !== confirmPassword) {
      setError('Les mots de passe ne correspondent pas')
      setLoading(false)
      return
    }

    if (password.length < 6) {
      setError('Le mot de passe doit contenir au moins 6 caractères')
      setLoading(false)
      return
    }

    const { error } = await signUp(email, password)

    if (error) {
      // Traduire les erreurs courantes en français
      let errorMessage = error.message

      if (error.message.includes('User already registered')) {
        errorMessage = 'Un compte existe déjà avec cet email'
      } else if (error.message.includes('Password should be at least')) {
        errorMessage = 'Le mot de passe doit contenir au moins 6 caractères'
      } else if (error.message.includes('rate limit')) {
        errorMessage = 'Trop de tentatives. Veuillez réessayer dans quelques instants.'
      } else if (error.message.includes('Invalid email')) {
        errorMessage = 'Format d\'email invalide'
      } else if (error.message.includes('Signup requires a valid password')) {
        errorMessage = 'Veuillez entrer un mot de passe valide'
      }

      setError(errorMessage)
    } else {
      setSuccess(true)
    }

    setLoading(false)
  }

  if (success) {
    return (
      <Iridescence>
        <div className="flex items-center justify-center min-h-screen">
          {/* Message de succès */}
          <div className="max-w-md w-full mx-4 text-center">
            <div className="backdrop-blur-xl bg-white/10 rounded-2xl shadow-2xl border border-white/20 p-8">
            <div className="inline-flex items-center justify-center w-16 h-16 rounded-full bg-gradient-to-br from-green-400 to-emerald-600 mb-6 relative">
              <div className="absolute inset-0 rounded-full bg-green-400 animate-ping opacity-20"></div>
              <UserCheck className="w-8 h-8 text-white relative z-10" />
            </div>
            <h2 className="text-3xl font-bold text-white mb-4">
              Compte créé avec succès !
            </h2>
            <p className="text-purple-200 mb-2">
              <strong className="text-white">Vérifiez votre email</strong> pour confirmer votre compte.
            </p>
            <p className="text-purple-300 text-sm mb-6">
              Ensuite, connectez-vous pour compléter votre profil et commencer à partager vos moments vocaux.
            </p>
            <Link
              href="/auth/login"
              className="inline-block w-full bg-gradient-to-r from-pink-500 to-purple-600 text-white font-medium py-3 px-6 rounded-lg hover:from-pink-600 hover:to-purple-700 transition-all shadow-lg hover:shadow-pink-500/50"
            >
              Aller à la connexion
            </Link>
            </div>
          </div>
        </div>
      </Iridescence>
    )
  }

  return (
    <Iridescence>
      <div className="flex items-center justify-center min-h-screen py-12">
        {/* Formulaire */}
        <div className="max-w-md w-full mx-4">
          {/* Logo et titre avec effet sonore */}
          <div className="text-center mb-8">
          <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-br from-pink-500 to-purple-600 mb-4 relative">
            <div className="absolute inset-0 rounded-full bg-pink-500 animate-ping opacity-20"></div>
            <svg className="w-10 h-10 text-white relative z-10" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z" />
            </svg>
          </div>
          <h1 className="text-4xl font-bold text-white mb-2 tracking-tight">
            Rejoindre Voccal
          </h1>
          <p className="text-purple-200 text-lg">
            Créez votre profil et partagez votre voix
          </p>
        </div>

        {/* Carte du formulaire avec effet glassmorphism */}
        <div className="backdrop-blur-xl bg-white/10 rounded-2xl shadow-2xl border border-white/20 p-8">
          <form onSubmit={handleSubmit} className="space-y-5">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-purple-100 mb-2">
                Adresse email
              </label>
              <div className="relative group">
                <input
                  id="email"
                  name="email"
                  type="email"
                  autoComplete="email"
                  required
                  className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300/50 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all backdrop-blur-sm"
                  placeholder="votre@email.com"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
                <div className="absolute inset-0 rounded-lg bg-gradient-to-r from-pink-500 to-purple-500 opacity-0 group-focus-within:opacity-20 transition-opacity pointer-events-none blur"></div>
              </div>
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-purple-100 mb-2">
                Mot de passe
              </label>
              <div className="relative group">
                <input
                  id="password"
                  name="password"
                  type="password"
                  autoComplete="new-password"
                  required
                  className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300/50 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all backdrop-blur-sm"
                  placeholder="Min. 6 caractères"
                  value={password}
                  onChange={(e) => handlePasswordChange(e.target.value)}
                />
                <div className="absolute inset-0 rounded-lg bg-gradient-to-r from-pink-500 to-purple-500 opacity-0 group-focus-within:opacity-20 transition-opacity pointer-events-none blur"></div>
              </div>
              {password && (
                <div className="mt-3">
                  <div className="flex gap-1.5">
                    {[...Array(4)].map((_, i) => (
                      <div
                        key={i}
                        className={`h-1.5 flex-1 rounded-full transition-all duration-300 ${
                          i < passwordStrength
                            ? passwordStrength === 1
                              ? 'bg-red-400'
                              : passwordStrength === 2
                              ? 'bg-orange-400'
                              : passwordStrength === 3
                              ? 'bg-yellow-400'
                              : 'bg-green-400'
                            : 'bg-white/20'
                        }`}
                      />
                    ))}
                  </div>
                  <p className="text-xs text-purple-200 mt-2">
                    {passwordStrength === 0 && 'Trop faible'}
                    {passwordStrength === 1 && 'Faible'}
                    {passwordStrength === 2 && 'Moyen'}
                    {passwordStrength === 3 && 'Bon'}
                    {passwordStrength === 4 && 'Excellent'}
                  </p>
                </div>
              )}
            </div>

            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-purple-100 mb-2">
                Confirmer le mot de passe
              </label>
              <div className="relative group">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  type="password"
                  autoComplete="new-password"
                  required
                  className="w-full px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-purple-300/50 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:border-transparent transition-all backdrop-blur-sm"
                  placeholder="Retapez le mot de passe"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                />
                <div className="absolute inset-0 rounded-lg bg-gradient-to-r from-pink-500 to-purple-500 opacity-0 group-focus-within:opacity-20 transition-opacity pointer-events-none blur"></div>
              </div>
            </div>

            {error && (
              <div className="bg-red-500/20 border border-red-500/50 text-red-100 px-4 py-3 rounded-lg text-sm backdrop-blur-sm">
                {error}
              </div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="w-full relative group overflow-hidden bg-gradient-to-r from-pink-500 to-purple-600 text-white font-medium py-3 px-4 rounded-lg hover:from-pink-600 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-pink-500 focus:ring-offset-2 focus:ring-offset-transparent disabled:opacity-50 disabled:cursor-not-allowed transition-all shadow-lg hover:shadow-pink-500/50"
            >
              <span className="relative z-10">
                {loading ? 'Création...' : 'Créer mon compte'}
              </span>
              <div className="absolute inset-0 bg-gradient-to-r from-pink-600 to-purple-700 opacity-0 group-hover:opacity-100 transition-opacity"></div>
            </button>
          </form>

          <div className="mt-6 text-center">
            <p className="text-purple-200 text-sm">
              Déjà un compte ?{' '}
              <Link
                href="/auth/login"
                className="text-pink-300 hover:text-white font-medium transition-colors"
              >
                Se connecter
              </Link>
            </p>
          </div>
        </div>
        </div>
      </div>
    </Iridescence>
  )
}
